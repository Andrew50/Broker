#def get(ticker = 'NFLX',tf = 'd',dt = None, bars = 0, offset = 0):

	#	def adjust_date(dt,tf):
	#		if 'd' in tf or 'w' in tf: tf  = 'd'
	#		else: tf = '1min'
	#		if dt.hour <= 5 or (dt.hour == 5 and dt.minute < 30):
	#			time = datetime.time(15,59,0)
	#			dt = datetime.datetime.combine(dt.date() - datetime.timedelta(days = 1),time)
	#		if dt.hour > 12:
	#			time = datetime.time(15,59,0)
	#			dt = datetime.datetime.combine(dt.date(),time)
	#		if dt.second != 0:
	#			time = datetime.time(dt.hour,dt.minute,0)
	#			dt = datetime.datetime.combine(dt.date(),time)
	#		while dt.weekday() > 4: dt -= datetime.timedelta(days = 1)
	#		dt = pd.DataFrame({'datetime':[dt],'god':[3]}).set_index('datetime').resample(tf).apply({'god' : 'first'}).index[-1]
	#		if 'h' in tf: dt += datetime.timedelta(minutes = 30)
	#		return dt

	#	def append_tv(ticker,tf,df,pm):
	#		try: exchange = pd.read_feather('C:/Stocks/sync/files/full_scan.feather').set_index('Ticker').loc[ticker]['Exchange']
	#		except KeyError: raise TimeoutError()
	#		if 'd' in tf or 'w' in tf: interval = Interval.in_daily
	#		else: interval = Interval.in_1_minute
	#		try: add = TvDatafeed(username="cs.benliu@gmail.com",password="tltShort!1").get_hist(ticker, exchange, interval=interval, n_bars=100000, extended_session = pm)
	#		except websocket._exceptions.WebSocketAddressException: raise TimeoutError
	#		except: raise TimeoutError
	#		add.drop('symbol', axis = 1, inplace = True)
	#		add.index = add.index + pd.Timedelta(hours=4)
	#		if pm: print(add)
	#		if df.empty or add.index[0] > df.index[-1]: return add
	#		add = add[Data.findex(add,df.index[-1]) + 1:]
	#		return pd.concat([df,add])

	#	try:
	#		try: df = feather.read_feather(Data.data_path(ticker,tf))
	#		except (FileNotFoundError, pyarrow.lib.ArrowInvalid): 
	#			df = pd.DataFrame()
	#			if dt == None: raise TimeoutError
	#		pm = False
	#		if dt != None:
	#			dt = Data.format_date(dt)
	#			adj_dt = adjust_date(dt,tf)
	#			try: index = Data.findex(df,adj_dt)
	#			except IndexError: 
	#				df = append_tv(ticker,tf,df,False)
	#				try: index = Data.findex(df,adj_dt)
	#				except IndexError:
	#					print(f'{df} {adj_dt}')
	#					raise TimeoutError

	#			if dt.hour < 5 or (dt.hour == 5 and dt.minute < 30):
	#				if 'd' in tf or 'w' in tf: df = append_tv(ticker,tf,df,True)
	#				else:
	#					pm = True
	#					pm_bar = pd.read_feather('C:/Stocks/sync/files/current_scan.feather').set_index('Ticker').loc[ticker]
	#					pm_change = pm_bar['Pre-market Change']
	#					pm_vol = pm_bar['Pre-market Volume']
	#					if np.isnan(pmchange): pmchange = 0
	#					if np.isnan(pm_vol): pm_vol = 0
	#					pm_price = pm_change +  df.iat[-1,3]
	#					row  =pd.DataFrame({'datetime': [pd.Timestamp(datetime.datetime.today())], 'open': [pm_price],'high': [pm_price], 'low': [pm_price], 'close': [pm_price], 'volume': [pm_vol]}).set_index("datetime",drop = True)
	#					df = pd.concat([df, row])
	#			elif offset == 0: df = df[:index + 1]
	#			if dt < df.index[0] or df.empty: raise TimeoutError
	#		def resample(df,tf): return df.resample(tf).apply({'open'  : 'first', 'high'  : 'max', 'low':'min', 'close' : 'last', 'volume': 'sum' })
	#		if 'w' in tf:
	#			last_bar = df.tail(1)
	#			df.index = df.index - pd.Timedelta(days = 7)
	#			df = df[:-1]
	#			df = resample(df,tf)
	#			df = pd.concat([df,last_bar])
	#			df.index = df.index.normalize() + pd.Timedelta(minutes = 570)
	#		elif 'd' in tf:
	#			df = resample(df,tf)
	#			df.index = df.index.normalize() + pd.Timedelta(minutes = 570)
	#		elif 'h' in tf:
	#			df.index = df.index + pd.Timedelta(minutes = -30)
	#			df = resample(df,tf)
	#			df.index = df.index + pd.Timedelta(minutes = 30)
	#			#df = df.between_time('09:30' , '15:59')
	#		elif 'min' in tf: 
	#			df = resample(df,tf)
	#			print(df)###
	#		if not pm: df = df.between_time('09:30' , '15:59').dropna()
	#		if offset != 0: df = df[:Data.findex(df,dt)+offset]
	#		df['ticker'] = ticker
	#		return df[-bars:]
	#	except TimeoutError: return pd.DataFrame()